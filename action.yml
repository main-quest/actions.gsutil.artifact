name: "Get artifact from GCS"
description: "Uses main-quest/actions.gsutil"
inputs:
  key:
    description: "Service account json key, base64 encrypted or not"
    required: true
  bucket:
    description: |
      "Specify bucket name or leave empty to use the one generated by main-quest/actions.gsutil.artifact.bucketname"
    required: false
  run_id:
    description: "Optionally specify another run to download the artifact from. Leave empty to download from the current run"
    required: false
  name:
    description: "Artifact name. Artifacts are stored in folders under <bucket>/run-<run-id>/<artifact-name>/"
    required: true
  path:
    description: "Destination. If it ends with a '/', a directory will be created if it doesn't already exist. If not specified, it'll download to the current directory"
    required: false
    default: "./"
  unzip:
    description: "Unzip all zip files found in the destination. Note that this is just a post-download step, and no files are removed (only replaced, in case archives contain multiple files with same relative paths)"
    required: false
    default: false
    
runs:
  using: "composite"
  steps:  
      - name: Get bucket name
        id: bucket_name_getter
        uses: main-quest/actions.gsutil.artifact.bucketname@master
        with:
          bucket: ${{ inputs.bucket }}

      #/OS
      - name: "Make dirs if they don't exist [UNIX]"
        if: runner.os != 'Windows'
        shell: bash
        run: |
          s="${{ github.action_path }}/make_dirs.sh"
          p="${{ inputs.path }}"
          chmod +x "$s"
          "$s" "$p"

      - name: "Make dirs if they don't exist [WIN]"
        if: runner.os == 'Windows'
        # shell: wsl bash --noprofile --norc -euo pipefail "$(s="$(wslpath '{0}')" && sed -i 's/\r$//' "$s" && echo "$s")"
        # run: |
        #   s=$(wslpath "${{ github.action_path }}/make_dirs.sh")
        #   p=$(wslpath "${{ inputs.path }}")
        #   chmod +x "$s"
        #   "$s" "$p"
        shell: powershell
        run: |
          $s="$(wsl bash --noprofile --norc -euo pipefail -c 'wslpath ''${{ github.action_path }}/make_dirs.sh''')"
          echo "Script debug: $s"
          wsl bash --noprofile --norc -euo pipefail -c "chmod +x '$s'"
          wsl bash --noprofile --norc -euo pipefail -c "sed -i 's/\r`$//' '$s'"
          
          $p="$(wsl bash --noprofile --norc -euo pipefail -c 'wslpath ''${{ inputs.path }}''')"

          $cmd = 'export GITHUB_OUTPUT="$(wslpath '''
          $cmd += "$env:GITHUB_OUTPUT"
          $cmd += ''')"'
          $cmd += " && '$s'"
          $cmd += ' '''
          $cmd += "$p"
          $cmd += ''''
          wsl bash --noprofile --norc -euo pipefail -c "$cmd"
      #OS/

      #/OS
      - name: "Convert path [UNIX]"
        id: path_converter_unix
        if: runner.os != 'Windows'
        shell: bash
        run: |
          p="${{ inputs.path }}"
          # echo "::set-output name=value::$p"
          echo "value=$p" >> "$GITHUB_OUTPUT"

      - name: "Convert path [WIN]"
        id: path_converter_win
        if: runner.os == 'Windows'
        # shell: wsl bash --noprofile --norc -euo pipefail "$(s="$(wslpath '{0}')" && sed -i 's/\r$//' "$s" && echo "$s")"
        # run: |
        #   p=$(wslpath "${{ inputs.path }}")
        #   # echo "::set-output name=value::$p"
        #   echo "value=$p" >> "$env:GITHUB_OUTPUT"
        shell: powershell
        run: |
          $p="$(wsl bash --noprofile --norc -euo pipefail -c 'wslpath ''${{ inputs.path }}''')"
          echo "value=$p" >> "$env:GITHUB_OUTPUT"
      #OS/

      #/OS
      - name: "Get run id [UNIX]"
        id: run_id_getter_unix
        if: runner.os != 'Windows'
        shell: bash
        run: |
          run_id="${{ inputs.run_id }}"
          if [ -z "$run_id" ]; then
            run_id="${{ github.run_id }}"
          fi
          # echo "::set-output name=value::$run_id"
          echo "value=$run_id" >> "$GITHUB_OUTPUT"

      - name: "Get run id [WIN]"
        id: run_id_getter_win
        if: runner.os == 'Windows'
        # shell: wsl bash --noprofile --norc -euo pipefail "$(s="$(wslpath '{0}')" && sed -i 's/\r$//' "$s" && echo "$s")"
        # run: |
        #   run_id="${{ inputs.run_id }}"
        #   if [ -z "$run_id" ]; then
        #     run_id="${{ github.run_id }}"
        #   fi
        #   # echo "::set-output name=value::$run_id"
        #   echo "value=$run_id" >> "$env:GITHUB_OUTPUT"
        shell: powershell
        run: |
          $run_id="${{ inputs.run_id }}"
          if (-not $run_id)
          {
            $run_id="${{ github.run_id }}"
          }
          echo "value=$run_id" >> "$env:GITHUB_OUTPUT"
      #OS/

      - uses: main-quest/actions.gsutil@master
        with:
          key: ${{ inputs.key }}
          do: -m cp -r "gs://${{ steps.bucket_name_getter.outputs.bucket_name }}/${{ steps.run_id_getter_unix.outputs.value }}${{ steps.run_id_getter_win.outputs.value }}/${{ inputs.name }}/*" "${{ steps.path_converter_unix.outputs.value }}${{ steps.path_converter_win.outputs.value }}"

      #/OS
      - name: "Unzip all .zip files if asked [UNIX]"
        if: runner.os != 'Windows' && inputs.unzip == 'true'
        shell: bash
        working-directory: ${{ inputs.path }}
        run: unzip *.zip

      - name: "Unzip all .zip files if asked [WIN]"
        if: runner.os == 'Windows' && inputs.unzip == 'true'
        shell: powershell
        working-directory: ${{ inputs.path }}
        run: Expand-Archive *.zip
      #OS/
